<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>no.ntnu.oskarlothe</groupId>
    <artifactId>tomorrow</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <maven.compiler.plugin.version>3.10.1</maven.compiler.plugin.version>
        <javafx.maven.plugin.version>0.0.8</javafx.maven.plugin.version>
        <maven.surefire.plugin.version>3.0.0-M7</maven.surefire.plugin.version>
        <maven.jar.plugin.version>3.3.0</maven.jar.plugin.version>
        <maven.javadoc.plugin.version>3.4.1</maven.javadoc.plugin.version>

        <junit.jupiter.version>5.9.2</junit.jupiter.version>
        <javafx.version>20-ea+9</javafx.version>

        <application.main>no.ntnu.oskarlothe.Main</application.main>
        <application.filename>Tomorrow</application.filename>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>${javafx.maven.plugin.version}</version>
                <configuration>
                    <mainClass>${application.main}</mainClass>
                </configuration>

            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire.plugin.version}</version>
            </plugin>

            <!--
              To enable the option of double-clicking the JAR-file to make it run,
              the packaging stage of Maven needs to know which of the classes
              holds the main()-method. This can be set in the maven-jar-plugin.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven.jar.plugin.version}</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <!-- add the full name to your class containing the main()-method -->
                            <mainClass>${application.main}</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>


            <plugin>
                <!--
                Plugin that generates JavaDoc
                -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${maven.javadoc.plugin.version}</version>
                <!-- configure how to execute this plugin -->
                <executions>
                    <execution>
                        <!--
                            connect the execution of the plugin to the Maven lifecycle phase "package"
                            so that JavaDoc is generated every time you run "mvn package"
                        -->
                        <phase>package</phase>
                        <id>attach-javadocs</id>
                        <!--
                            set which of the goals in the plugin to execute. The JavaDoc plugin
                            has a total of 16 goals to choose from. See: https://maven.apache.org/plugins/maven-javadoc-plugin/
                            The most common once beeing either "javadoc" or "jar"
                        -->
                        <goals>
                            <goal>javadoc</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- generate javadoc only for public classes and members -->
                    <show>public</show>
                    <!-- Omits the HELP link in the navigation bars at the top and bottom of each
                    page of output. -->
                    <nohelp>true</nohelp>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <dependency>
            <groupId>de.jensd</groupId>
            <artifactId>fontawesomefx</artifactId>
            <version>8.2</version>
        </dependency>

        <!--
        And of course we need to add support for JUnit5-testing ;-)
        REMEMBER to add the scope-part!
        -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>
</project>