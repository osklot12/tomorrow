package no.ntnu.oskarlothe.model;

import java.time.LocalDate;

/**
 * A class responsible for navigating days generated by the DayGenerator in a
 * more effiecient way.
 * 
 * @author Oskar Lothe
 * @version 1.0-SNAPSHOT
 */
public class DayNavigator {
    private LocalDate currentDate;

    private Schedule schedule;

    /**
     * Default constructor for the DayNavigator class.
     * 
     * @param date the date to start navigating from
     */
    public DayNavigator(LocalDate date, Schedule schedule) {
        if (date == null) {
            throw new IllegalArgumentException("Date must be defined.");
        }

        if (schedule == null) {
            throw new IllegalArgumentException("Schedule must be defined.");
        }

        this.currentDate = date;
        this.schedule = schedule;
    }

    /**
     * Returns the next day in the schedule.
     * 
     * @return the next day from the schedule
     */
    public Day next() {
        LocalDate nextDate = currentDate.plusDays(1);

        this.currentDate = nextDate;
        return schedule.getDay(currentDate);
    }

    /**
     * Returns the previous day in the schedule.
     * 
     * @return the previous day from the schedule
     */
    public Day previous() {
        LocalDate previousDate = currentDate.minusDays(1);

        this.currentDate = previousDate;
        return schedule.getDay(previousDate);
    }

    /**
     * Sets the date for the DayNavigator.
     * This changes the date stored for retreiving the previous and next day.
     * 
     * @param date the date to set
     */
    public void setDate(LocalDate date) {
        if (date == null) {
            throw new IllegalArgumentException("Date must be defined.");
        }

        this.currentDate = date;
    }
}
