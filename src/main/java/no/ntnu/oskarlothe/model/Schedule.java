package no.ntnu.oskarlothe.model;

import java.time.LocalDate;

/**
 * A class representing a schedule in the application.
 * A schedule consists of a list of days, as well as a list of repeating tasks.
 * <br/>
 * <br/>
 * The dayList field only contains days that holds data manipulated by the user.
 * All other "dead" days will be generated by the dayGenerator object.
 * 
 * @author Oskar Lothe
 * @version 1.0-SNAPSHOT
 */
public class Schedule {
    private DayList days;

    private TaskList repeatingTasks;

    /**
     * Default constructor for the Schedule class.
     */
    public Schedule() {
        this.days = new DayList();
        this.repeatingTasks = new TaskList();
    }

    /**
     * Returns the day for a spesific date.
     * 
     * @param date date of the day
     * @return day object matching the given date
     */
    public Day getDay(LocalDate date) {
        return DayGenerator.generate(date, this.days, this.repeatingTasks);
    }

    /**
     * Returns the list of days.
     * 
     * @return DayList object
     */
    public DayList getDayList() {
        return this.days;
    }

    /**
     * Returns the list of repeating tasks.
     * 
     * @return TaskList containing repeating task objects
     */
    public TaskList getRepeatingTasks() {
        return this.repeatingTasks;
    }

    /**
     * Returns all tasks from the list of days.
     * 
     * @return all tasks from the individual days
     */
    public TaskList getAllDayTasks() {
        TaskList result = new TaskList();

        this.days.forEach(
            (day) -> {
                day.forEach(
                    (task) -> {
                        result.add(task);
                    }
                );
            }
        );

        return result;
    }

    /**
     * Returns a list of all the tasks in the schedule; both tasks from the days and
     * the repeating tasks.
     * 
     * @return TaskList object containing all tasks
     */
    public TaskList getAllTasks() {
        TaskList result = this.getAllDayTasks().clone();

        result.addAll(this.repeatingTasks);

        return result;
    }

    /**
     * Adds a task for a spesific date.
     * 
     * @param task task to add
     * @param date the date to add to
     * @return true if added successfully, false if not
     */
    public boolean addTaskForDate(Task task, LocalDate date) {
        return this.getDay(date).add(task);
    }

    /**
     * Removes a task from a spesific date.
     * 
     * @param task task to remove
     * @param date date to remove task from
     * @return true if removed successfully, false if not
     */
    public boolean removeTaskForDate(Task task, LocalDate date) {
        return this.getDay(date).remove(task);
    }

    /**
     * Adds a repeating task to the schedule.
     * 
     * @param task the task to add
     * @return true if successfully added, false if not
     */
    public boolean addRepeatingTask(RepeatingTask task) {
        return this.getRepeatingTasks().add(task);
    }

    /**
     * Removes a repeating task from the schedule.
     * 
     * @param task repeating task to remove
     * @return true is successfully removed, false if not
     */
    public boolean removeRepeatingTask(RepeatingTask task) {
        return this.getRepeatingTasks().remove(task);
    }
}
